install.packages("devtools")
install.packages("swirl")
load("swirl")
library("swirl")
swirl()
5 + 7
x <- 5 + 7
x
y <- x - 3
y
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z * 2 + 100
mySqrt <- sqrt(z-1)
mySqrt
myDiv <- z/mySqrt
myDiv
c(1,2,3,4) + c(0,10)
c(1,2,3,4) + (c0,10,100)
c(1,2,3,4) + c(0,10,100)
browseVignettes("IRanges")
swirl()
5 _ 7
5 + 7
x <- 5 + 7
x
y <- x - 3
y
z <- c(1.1,9,3.14)
?c
z
c(z, 555, z)
z * 2 + 100
mySqrt <- z - 1
mySqrt <- sqrt(z - 1)
mySqrt
myDiv <- z/mySqrt
myDiv
c(1,2,3) + c(0,10)
c(1,2,3,4) + c(0,10)
c(1,2,3,4) + c(0,10,100)
1:20
pi:10
15:1
`:`
?`:`
seq(1, 20)
seq(0,10,by=0.5)
seq(5,10,length=30)
my_seq <- seq(5,10,length=30)
length(my_seq)
1:length(my_seq)
seq(along=my_seq)
?seq_along
seq_along(my_seq)
rep(0, times=40)
rep(c(0,1,2), times=10)
rep(c(0,1,2), each=10)
x <- c(44, NA, 5, NA)
x * 3
y <- rnorm(1000)
z <- rep(NA, 1000)
myData <- sample(c(y, z), 100)
myNA <- is.na(myData)
myNA
myData == NA
sum(myNA)
myData
0/0
Inf-Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[is.na(x) & x > 0]
x[!is.na(x) & x > 0]
c(x[3],x[5],x[7])
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo=11, bar=2, norf = NA)
vect
names(vect)
vect2 <- c(11,2,NA)
names(vect2) <- c("foo","bar","norf")
identical(vect1, vect2)
identical(vect, vect2)
vect["bar"]
vect[c("foo","bar")]
myVector <- 1:20
myVector
dim(myVector)
length(myVector)
dim(myVector) <- c(4,5)
dim(myVector)
attributes(myVector)
myVector
class(myVector)
myMatrix <- myVector
?matrix
myMatrix <- matrix(data =1:20, nrow=4, ncol=5)
myMatrix <- matrix(data =1:20, nrow=4, ncol=5, byrow= FALSE, dimnames=NULL)
myMatrix <- matrix(data =c(1:20), nrow=4, ncol=5, byrow= FALSE, dimnames=NULL)
myMatrix <- matrix(data =as.vector(1:20), nrow=4, ncol=5, byrow= FALSE, dimnames=NULL)
myMatrix <- matrix(data =as.vector(1:20), nrow=4, ncol=5)
myMatrix <- matrix(data =1:20, nrow=4, ncol=5)
myMatrix <- matrix(data =1:20, nrow=4, ncol=5)
info()
myMatrix <- matrix(data =expression(1:20), nrow=4, ncol=5)
myMatrix <- matrix(data =c(1:20), nrow=4, ncol=5)
swirl()
myVector <- 1:20
myVector
dim(myVector)
length(myVector)
dim(myVector) < c(4,5)
dim(myVector) <- c(4,5)
dim(myVectr)
dim(myVector)
attributes(myVector)
myVector
class(myVector)
myMatrix <- myVector
?matrix
myMatrix2 <- matrix(data=1:20,nrow=4,ncol=5)
identical(myMatrix, myMatrix2)
patients <- c("Bill","Gina","Kelly","Sean")
cbind(patients, myMatrix)
myData <- data.frame(patients, myMatrix)
myData
class(myData)
cnames <- c("patient","age","weight","bp","rating","test")
colnames(myData,cnames)
?colnames
colnames(myData) <- cnames
myData
swirl()
install_from_swirl("Data Analysis")
swirl()
nxt()
nxt()
cars
cars$mpgCity
myMPG <- cars$mpgCity
mean(myMPG)
median(myMPG)
table(myMPG)
19
install_from_swirl("Mathematical Biostatistics Boot Camp")
swirl()
swirl()
range(cars$price)
61.9 - 7.4
var(cars$price)
sd(cars$price)
nxt()
nxt()
20
10
25
nxt
nxt()
nxt()
9
6
5
11
19
skip()
summary(car$price)
summary(cars$price)
bye()
swirl()
bye()
swirl()
source('~/.active-rstudio-document', echo=TRUE)
getwd()
mkdir
library(KernSmooth)
librar(MASS)
library(MASS)
?shuttle
glm(use ~ wind,  family=binomial(logit), data=shuttle)
summary(glm(use ~ wind,  family=binomial(logit), data=shuttle))
exp(coef(glm(use ~ wind,  family=binomial(logit), data=shuttle)))
0.7777778/0.9686888
exp(coef(glm(use ~ wind + magn,  family=binomial(logit), data=shuttle)))
0.695232/0.9684981
exp(coef(glm(use ~ wind,  family=binomial(logit), data=shuttle)))
coef(glm(use ~ wind,  family=binomial(logit), data=shuttle)))
coef(glm(use ~ wind,  family=binomial(logit), data=shuttle))
coef(glm(1-use ~ wind,  family=binomial(logit), data=shuttle))
coef(glm(I(1-use) ~ wind,  family=binomial(logit), data=shuttle))
coef(1-as.numeric(use) ~ wind,  family=binomial(logit), data=shuttle))
coef(I(1-as.numeric(use)) ~ wind,  family=binomial(logit), data=shuttle))
coef(I(1-as.numeric(use)) ~ wind,  family=binomial(logit), data=shuttle))
shuttle$invertuse <- 1-as.numeric(use)
shuttle$invertuse <- 1-as.numeric(shuttle$use)
shuttle$invertuse <- factor(shuttle$invertuse)
coef(invertuse ~ wind,  family=binomial(logit), data=shuttle))
coef(glm(invertuse ~ wind,  family=binomial(logit), data=shuttle))
data(InsectSprays)
?InsectSprays
glm(count ~ spray,  family="poisson", data=InsectSprays)
2.67415/0.05588
exp(2.67415)/exp(0.05588)
pm <- glm(count ~ spray,  family="poisson", data=InsectSprays)
summary(pm)
names(pm)
deltamethod(list(~ exp(x1), ~ exp(x2), ~ exp(x3), ~ exp(x4), ~ exp(x5), ~ exp(x6)), coef(pm), cov.pm)
require(msm)
install.packages("msm")
require(msm)
deltamethod(list(~ exp(x1), ~ exp(x2), ~ exp(x3), ~ exp(x4), ~ exp(x5), ~ exp(x6)), coef(pm), cov.pm)
cov.pm <- vcovHC(pm, type="HC0")
require(sandwich)
cov.pm <- vcovHC(pm, type="HC0")
deltamethod(list(~ exp(x1), ~ exp(x2), ~ exp(x3), ~ exp(x4), ~ exp(x5), ~ exp(x6)), coef(pm), cov.pm)
r.est <- cbind(Estimate= coef(pm), "Robust SE" = std.err,
"Pr(>|z|)" = 2 * pnorm(abs(coef(m1)/std.err), lower.tail=FALSE),
LL = coef(m1) - 1.96 * std.err,
UL = coef(m1) + 1.96 * std.err)
std.err <- sqrt(diag(cov.pm))
r.est <- cbind(Estimate= coef(pm), "Robust SE" = std.err,
"Pr(>|z|)" = 2 * pnorm(abs(coef(m1)/std.err), lower.tail=FALSE),
LL = coef(m1) - 1.96 * std.err,
UL = coef(m1) + 1.96 * std.err)
r.est <- cbind(Estimate= coef(pm), "Robust SE" = std.err,
"Pr(>|z|)" = 2 * pnorm(abs(coef(pm)/std.err), lower.tail=FALSE),
LL = coef(m1) - 1.96 * std.err,
UL = coef(m1) + 1.96 * std.err)
r.est <- cbind(Estimate= coef(pm), "Robust SE" = std.err,
"Pr(>|z|)" = 2 * pnorm(abs(coef(pm)/std.err), lower.tail=FALSE),
LL = coef(pm) - 1.96 * std.err,
UL = coef(pm) + 1.96 * std.err)
s <- deltamethod(list(~ exp(x1), ~ exp(x2), ~ exp(x3), ~ exp(x4), ~ exp(x5), ~ exp(x6)), coef(pm), cov.pm)
rexp.est <- exp(r.est[, -3])
rexp.est[, "Robust SE"] <- s
rexp.est
14.5000000/1.0574713
pm <- glm(count ~ spray,  family="poisson", data=InsectSprays)
summary(pm)
exp(2.67415)/exp(0.05588)
?bs
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
?lm
?glm
lm(y ~ x, intercept=TRUE)
lm(y ~ bs(x, knots = seq(0)))
require(splines)
lm(y ~ bs(x, knots = seq(0)))
?bs
summary(lm(formula = y ~ bs(x, knots = seq(0))))
m <- lm(formula = y ~ bs(x, knots = seq(0))))
m <- lm(formula = y ~ bs(x, knots = seq(0)))
names(m)
m$coefficients
m <- lm(formula = y ~ bs(x, knots = seq(0)), intercept=TRUE)
m <- lm(formula = y ~ bs(x, knots = seq(0), intercept = TRUE))
m$coefficients
summary(m)
knots <- seq(0);
splineTerms <- sapply(knots, x)
xMat <- cbind(0, x)
x
m <- lm(formula = y ~ xMat)
summary(m)
model.matrix(m)
x
m <- lm(formula = y ~ x)
summary(m)
names(m)
m <- lm(formula = y ~ bs(x, knots = seq(0), intercept = TRUE))
summary(m)
pm <- glm(count ~ spray,  family="poisson", data=InsectSprays)
summary(pm)
exp( 0.05588)/exp(-1.94018)
exp(2.67415)/exp(0.05588)
?relevel
pm <- glm(count ~ relevel(spray, ref="C",  family="poisson", data=InsectSprays)
)
pm <- glm(count ~ relevel(spray, ref="C"),  family="poisson", data=InsectSprays)
summary(pm)
exp(1.9402)/exp(1.9961)
?ns
m <- lm(formula = y ~ ns(x, knots = seq(0), intercept = TRUE))
summary(m)
m <- lm(formula = y ~ ns(x, knots = seq(-5, 0, 5), intercept = TRUE))
summary(m)
m <- lm(formula = y ~ ns(x, knots = seq(0), intercept = TRUE))
summary(m)
plot(x, y, main="Scatterplot Example")
nx <- seq(0:5)
nx
x
nx <- seq(0:4)
nx
nx <- c(0, 1, 2, 3, 4, 5)
nx
m <- lm(formula = y ~ nx)
nx <- as.integer(nx)
m <- lm(formula = y ~ nx)
y
ny <- c(0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
m <- lm(formula = ny ~ nx)
summary(m)
swirl()
library(swirl)
swirl()
swirl()
swirl()
simbias()
x1c <- simbias()
apply(x1c,1, mean)
fit1 <- lm(Fertility ~ Agriculture, data=swiss)
fit3 <- lm(Fertility ~ Agriculture + Examination + Education, data=swiss)
anova(fit1, fit3)
deviance(fit3)
d <- deviance(fit3)/43
n <- (deviance(fit1)-deviance(fit3))/2
n/d
pf(n/d, 2,43, lower.tail=FALSE)
shapiro.test(fit3$residuals)
anova(fit1, fit3, fit5, fit6)
View(ravenData)
mdl glm(ravenWinNum ~ ravenScore, family=binomial, raveData )
mdl <- glm(ravenWinNum ~ ravenScore, family=binomial, raveData )
mdl <- glm(ravenWinNum ~ ravenScore, family=binomial, ravenData )
lodds <- predict(mdl, data.frame(ravenScore=c(0, 3, 6))
)
exp(lodds)/(1+exp(lodds))
summary(mdl)
exp(confint(mdl))
anova(mdl)
qchisq(0.95, 1)
var(rpois(1000, 50))
Use View(hits)
View(hits)
class(hits[,'date'])
as.integer(head(hits[,'date']))
mdl <- glm(visits ~ date, poisson, hits)
summary(mdl)
exp(confint(mdl, 'date'))
which.max(hits[,'visits']
)
hits[704,]
lambda <- mdl$fitted.values[704]
qpois(.95, lambda)
mld2 <- glm(visits ~ date, poisson, hits, offset=log(visits+1))
mdl2 <- glm(visits ~ date, poisson, hits, offset=log(visits+1))
mdl2 <- glm(visits ~ date + offset=log(visits+1), poisson, hits)
mdl2 <- glm(visits ~ date + offset(log(visits+1)), poisson, hits)
mdl2 <- glm(formula = simplystats ~ date, family = poisson, data = hits, offset = log(visits + 1))
summary(mdl2)
qpois(.95, mdl2$fitted.values[704])
install.packages('devtools')
install_github('slidify', 'ramnathv')
library(devtools)
install_github('slidify', 'ramnathv')
install_github('slidifyLibraries', 'ramnathv')
library(slidify)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
View(segmentationOriginal)
training <- segmentationOriginal[segmentationOriginal$Case == "Train",]
test <- segmentationOriginal[segmentationOriginal$Case == "Test",]
?train
set.seed(125)
model <- train(Class ~ ., method="rpart", data=training)
library(rattle)
fancyRpartPlot(model$finalModel)
install.packages("pgmn")
library(pgmm)
data(olive)
olive = olive[,-1]
setwd("~/Practical Machine Learning")
load("\olive_data\olive.rda" )
load("/olive_data/olive.rda" )
load("olive_data/olive.rda" )
View(olive)
model <- train(Area ~ ., method="rpart", data=olive)
newdata = as.data.frame(t(colMeans(olive)))
?tree
library(tree)
install.packages("tree")
require(tree)
?tree
olive.tr <- tree(Area ~ ., olive)
predict(olive.tr, newdata)
model <- train(Area ~ ., method="rpart", data=olive)
predict(model, newdata)
fancyRpartPlot(model$finalModel)
library(ElemStatLearn)
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
View(SAheart)
model = glm(chd ~ age + alcohol + obesity + tobacco + typea + ldl, family="binomial")
model = glm(chd ~ age + alcohol + obesity + tobacco + typea + ldl, family="binomial", data = SAheart)
sum(((prediction > 0.5)*1) != values)/length(values)
sum(((model > 0.5)*1) != values)/length(values)
model = glm(chd ~ age + alcohol + obesity + tobacco + typea + ldl, family="binomial", data = trainSA)
prediction = predict(model, testSA)
sum(((prediction > 0.5)*1) != values)/length(values)
sum(((prediction > 0.5)*1) != testSA$chd)/length(testSA$chd)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
modFit <- train(y ~ ., data=vowel.train, method="rf", prox=TRUE)
varimp(modFit)
varImp(modFit)
set.seed( 33833)
modFit <- train(y ~ ., data=vowel.train, method="rf", prox=TRUE)
modFit <- randomForest(y ~ ., data=vowel.train)
varimp(modFit)
varImp(modFit)
vowel.train$y = as.factor(vowel.train$y)
vowel.test$y = as.factor(vowel.test$y)
set.seed( 33833)
modFit <- randomForest(y ~ ., data=vowel.train)
varImp(modFit)
?varImp
varImpPlot(modFit$finalModel)
varImpPlot(modFit)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
#Then set the seed to 13234 and fit a logistic regression model (method="glm",
# be sure to specify family="binomial") with Coronary Heart Disease (chd) as the
# outcome and age at onset, current alcohol consumption, obesity levels,
# cumulative tabacco, type-A behavior, and low density lipoprotein cholesterol
# as predictors. Calculate the misclassification rate for your model using this
# function and a prediction on the "response" scale:
model <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl,
data = trainSA, method = "glm", family = "binomial")
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(testSA$chd, predict(model, newdata = testSA))
missClass(trainSA$chd, predict(model, newdata = trainSA))
setwd("~/Practical Machine Learning/Course Project")
train <- read.csv("data/pml-training.csv", na.strings = missing.types)
missing.types <- c("NA", "")
train <- read.csv("data/pml-training.csv", na.strings = missing.types)
test <- read.csv("data/pml-testing.csv", na.strings = missing.type
)
test <- read.csv("data/pml-testing.csv", na.strings = missing.types)
View(train)
missing.types <- c("NA", "")
train <- read.csv("data/pml-training.csv", na.strings = missing.types)
test <- read.csv("data/pml-testing.csv", na.strings = missing.types)
View(test)
View(train)
names(train)
head(train$classe)
require(Amelia)
require(caret)
require(corrgram)
require(Hmisc)
require(plyr)
require(stringr)
names(training)[160]
names(train)[160]
missmap(training, main="Exercise Data - Missings Map", legend=FALSE)
missmap(train, main="Exercise Data - Missings Map", legend=FALSE)
missmap(train, main="Exercise Data - Missings Map", legend=FALSE)
?missmap
missmap(training)
missmap(train)
missmap(train)
